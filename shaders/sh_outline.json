{
  "id": 6956,
  "name": "Fork of Slap Slithe",
  "fragment": "#define tau 6.2831853\n\nprecision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform sampler2D image1;\nuniform sampler2D image2;\nuniform float lineWidth;\nuniform float rotationSpeed;\nuniform float tiling;\nuniform vec3 Glow_Shader1659670480918_176_color;\nuniform float start;\nuniform float end;\nuniform float alpha;\nuniform float distortion;\nuniform float Water_Fog1659670555816_241_speed;\nuniform vec3 Water_Fog1659670555816_241_color;\nuniform float brightness;\nuniform sampler2D noiseImage;\nuniform vec2 resolution;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1659670616834_256_color;\nvarying vec3 Serpent1659670422075_19_vPosition;\nvarying vec3 Serpent1659670422075_19_vNormal;\nvarying vec2 Serpent1659670422075_19_vUv;\nvarying vec2 Serpent1659670422075_19_vUv2;\nvec2 rotateUV(vec2 uv, float rotation) \n                                                                                                {\n                                                                                                    float mid = 0.5;\n                                                                                                    return vec2(cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid, cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid);\n                                                                                                }\nfloat reverse(float val) \n                                                                                                {\n                                                                                                    return 1.0 + -1.0 * val;\n                                                                                                }\nvarying vec3 fPosition;\nvarying vec3 fNormal;\nvarying vec2 Water_Fog1659670555816_241_vUv;\nmat2 makem2(in float theta) \n                                                                                                {\n                                                                                                    float c = cos(theta);\n                                                                                                    float s = sin(theta);\n                                                                                                    return mat2(c, -s, s, c);\n                                                                                                }\nfloat noise(in vec2 x) \n                                                                                                {\n                                                                                                    return texture2D(noiseImage, x * .01).x;\n                                                                                                }\nfloat fbm(in vec2 p) \n                                                                                                {\n                                                                                                    float z = 2.;\n                                                                                                    float rz = 0.;\n                                                                                                    vec2 bp = p;\n                                                                                                    for (float i = 1.;\n i < 6.0; i++) \n                                                                                                    {\n                                                                                                        rz += abs((noise(p) - 0.5) * 2.0) / z;\n                                                                                                        z = z * 2.;\n                                                                                                        p = p * 2.;\n                                                                                                    }\n                                                                                                    return rz;\n                                                                                                }\nfloat dualfbm(in vec2 p) \n                                                                                                {\n                                                                                                    vec2 p2 = p * distortion;\n                                                                                                    vec2 basis = vec2(fbm(p2 - time * Water_Fog1659670555816_241_speed * 1.6), fbm(p2 + time * Water_Fog1659670555816_241_speed * 1.7));\n                                                                                                    basis = (basis - .5) * .2;\n                                                                                                    p += basis;\n                                                                                                    return fbm(p * makem2(time * Water_Fog1659670555816_241_speed * 0.2));\n                                                                                                }\nvarying vec3 Wiggly_Improved1659670616834_256_vNormal;\nvarying float light;\nvec4 Serpent1659670422075_19_main() \n                                                                                                {\n                                                                                                    vec4 Serpent1659670422075_19_gl_FragColor = vec4(0.0);\n                                                                                                    float tile = tiling + 2.0 * sin(time * 0.5);\n                                                                                                    vec2 posTurn = tile * rotateUV(Serpent1659670422075_19_vUv, time * rotationSpeed * 2.0);\n                                                                                                    vec2 negTurn = tile * rotateUV(Serpent1659670422075_19_vUv, time * -rotationSpeed * 2.0);\n                                                                                                    float x = fract(fract(posTurn.x * 2.0) + fract(posTurn.y * 2.0));\n                                                                                                    float shadow = clamp(x * reverse(x) * 3.0, 0.0, 1.0);\n                                                                                                    float pos = fract(fract(posTurn.x) + fract(posTurn.y));\n                                                                                                    float val = step(pos, lineWidth);\n                                                                                                    vec3 col;\n                                                                                                    if (val > 0.0) \n                                                                                                    {\n                                                                                                        col = texture2D(image1, posTurn - 0.4 * time).rgb * (shadow + 0.4);\n                                                                                                    }\n else \n                                                                                                    {\n                                                                                                        col = texture2D(image2, negTurn - 0.4 * time).rgb + shadow * 0.2 * shadow;\n                                                                                                    }\n                                                                                                    Serpent1659670422075_19_gl_FragColor = vec4(col, 1.0);\n                                                                                                    return Serpent1659670422075_19_gl_FragColor *= 1.0;\n                                                                                                }\nvec4 Glow_Shader1659670480918_176_main() \n                                                                                                {\n                                                                                                    vec4 Glow_Shader1659670480918_176_gl_FragColor = vec4(0.0);\n                                                                                                    vec3 normal = normalize(fNormal);\n                                                                                                    vec3 eye = normalize(-fPosition.xyz);\n                                                                                                    float rim = smoothstep(start, end, 1.0 - dot(normal, eye));\n                                                                                                    Glow_Shader1659670480918_176_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * alpha * Glow_Shader1659670480918_176_color, 1.0);\n                                                                                                    return Glow_Shader1659670480918_176_gl_FragColor *= 1.0;\n                                                                                                }\nvec4 Water_Fog1659670555816_241_main() \n                                                                                                {\n                                                                                                    vec4 Water_Fog1659670555816_241_gl_FragColor = vec4(0.0);\n                                                                                                    vec2 p = (Water_Fog1659670555816_241_vUv.xy - 0.5) * resolution;\n                                                                                                    float rz = dualfbm(p);\n                                                                                                    Water_Fog1659670555816_241_gl_FragColor = vec4(Water_Fog1659670555816_241_color * rz * brightness, 1.0);\n                                                                                                    return Water_Fog1659670555816_241_gl_FragColor *= 1.0;\n                                                                                                }\nvec4 Wiggly_Improved1659670616834_256_main() \n                                                                                                {\n                                                                                                    vec4 Wiggly_Improved1659670616834_256_gl_FragColor = vec4(0.0);\n                                                                                                    Wiggly_Improved1659670616834_256_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n                                                                                                    return Wiggly_Improved1659670616834_256_gl_FragColor *= 1.0;\n                                                                                                }\nvoid main() \n                                                                                                {\n                                                                                                    gl_FragColor = (Glow_Shader1659670480918_176_main() + (Serpent1659670422075_19_main() * Water_Fog1659670555816_241_main()) + Wiggly_Improved1659670616834_256_main());                                                                                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1659670616834_256_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Serpent1659670422075_19_vPosition;\nvarying vec3 Serpent1659670422075_19_vNormal;\nvarying vec2 Serpent1659670422075_19_vUv;\nvarying vec2 Serpent1659670422075_19_vUv2;\nvarying vec3 fNormal;\nvarying vec3 fPosition;\nvarying vec2 fUv;\nvarying vec3 Water_Fog1659670555816_241_vPosition;\nvarying vec3 Water_Fog1659670555816_241_vNormal;\nvarying vec2 Water_Fog1659670555816_241_vUv;\nvarying vec2 Water_Fog1659670555816_241_vUv2;\nvarying vec3 Wiggly_Improved1659670616834_256_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1659670616834_256_vPosition;\nvec4 Serpent1659670422075_19_main() \n                                                                                                {\n                                                                                                    vec4 Serpent1659670422075_19_gl_Position = vec4(0.0);\n                                                                                                    Serpent1659670422075_19_vNormal = normal;\n                                                                                                    Serpent1659670422075_19_vUv = uv;\n                                                                                                    Serpent1659670422075_19_vUv2 = uv2;\n                                                                                                    Serpent1659670422075_19_vPosition = position;\n                                                                                                    Serpent1659670422075_19_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                    return Serpent1659670422075_19_gl_Position *= 1.0;\n                                                                                                }\nvec4 Glow_Shader1659670480918_176_main() \n                                                                                                {\n                                                                                                    vec4 Glow_Shader1659670480918_176_gl_Position = vec4(0.0);\n                                                                                                    fNormal = normalize(normalMatrix * normal);\n                                                                                                    vec4 pos = modelViewMatrix * vec4(position, 1.0);\n                                                                                                    fPosition = pos.xyz;\n                                                                                                    fUv = uv;\n                                                                                                    Glow_Shader1659670480918_176_gl_Position = projectionMatrix * pos;\n                                                                                                    return Glow_Shader1659670480918_176_gl_Position *= 1.0;\n                                                                                                }\nvec4 Water_Fog1659670555816_241_main() \n                                                                                                {\n                                                                                                    vec4 Water_Fog1659670555816_241_gl_Position = vec4(0.0);\n                                                                                                    Water_Fog1659670555816_241_vNormal = normal;\n                                                                                                    Water_Fog1659670555816_241_vUv = uv;\n                                                                                                    Water_Fog1659670555816_241_vUv2 = uv2;\n                                                                                                    Water_Fog1659670555816_241_vPosition = position;\n                                                                                                    Water_Fog1659670555816_241_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                                    return Water_Fog1659670555816_241_gl_Position *= 1.0;\n                                                                                                }\nvec4 Wiggly_Improved1659670616834_256_main() \n                                                                                                {\n                                                                                                    vec4 Wiggly_Improved1659670616834_256_gl_Position = vec4(0.0);\n                                                                                                    vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1659670616834_256_speed * time + position.y * frequency));\n                                                                                                    vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n                                                                                                    light = amplitude * sin(Wiggly_Improved1659670616834_256_speed * time + 1.0 + position.y * frequency);\n                                                                                                    Wiggly_Improved1659670616834_256_vPosition = newPosition;\n                                                                                                    Wiggly_Improved1659670616834_256_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n                                                                                                    return Wiggly_Improved1659670616834_256_gl_Position *= 1.0;\n                                                                                                }\nvoid main() \n                                                                                                {\n                                                                                                    gl_Position = Serpent1659670422075_19_main() + Glow_Shader1659670480918_176_main() + Water_Fog1659670555816_241_main() + Wiggly_Improved1659670616834_256_main();                                                                                                }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "lineWidth": {
      "value": "0.05",
      "type": "f",
      "glslType": "float"
    },
    "tiling": {
      "value": "4.91710563",
      "type": "f",
      "glslType": "float"
    },
    "rotationSpeed": {
      "value": "0.23382312",
      "type": "f",
      "glslType": "float"
    },
    "image1": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "image2": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "start": {
      "value": "0.5",
      "type": "f",
      "glslType": "float"
    },
    "end": {
      "value": "0.8",
      "type": "f",
      "glslType": "float"
    },
    "alpha": {
      "value": "0.5",
      "type": "f",
      "glslType": "float"
    },
    "Glow_Shader1659670480918_176_color": {
      "value": {
        "r": 5,
        "g": 5,
        "b": 40
      },
      "type": "c",
      "glslType": "vec3"
    },
    "resolution": {
      "value": {
        "x": "1",
        "y": "1"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "brightness": {
      "value": "0.0",
      "type": "f",
      "glslType": "float"
    },
    "noiseImage": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "distortion": {
      "value": "10",
      "type": "f",
      "glslType": "float"
    },
    "Water_Fog1659670555816_241_color": {
      "value": {
        "r": "2",
        "g": "2",
        "b": "2"
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Water_Fog1659670555816_241_speed": {
      "value": "0.02",
      "type": "f",
      "glslType": "float"
    },
    "amplitude": {
      "value": "0.2",
      "type": "f",
      "glslType": "float"
    },
    "frequency": {
      "value": "15",
      "type": "f",
      "glslType": "float"
    },
    "highlightIntensity": {
      "value": "0",
      "type": "f",
      "glslType": "float"
    },
    "highlightColor": {
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Wiggly_Improved1659670616834_256_color": {
      "value": {
        "r": 0,
        "g": 0,
        "b": 0
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Wiggly_Improved1659670616834_256_speed": {
      "value": "5",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/6956",
  "user": {
    "username": "MrBodean",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}